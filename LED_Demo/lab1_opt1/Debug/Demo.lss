
Demo.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000200  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .exception    00000200  80002400  80002400  00002800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a0  80002600  80002600  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  5 .bss          000000f8  00000008  00000008  00000000  2**2
                  ALLOC
  6 .heap         0000ef00  00000100  00000100  00000000  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000000d8  00000000  00000000  00002ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000000c5  00000000  00000000  00002ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00000c3d  00000000  00000000  00002c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000374  00000000  00000000  000038aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001006  00000000  00000000  00003c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000000e8  00000000  00000000  00004c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000061b  00000000  00000000  00004d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000186  00000000  00000000  00005327  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 001daba7  00000000  00000000  000054ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 18 .debug_ranges 00000098  00000000  00000000  001e0058  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf df c0 	sub	pc,pc,-8256

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf ff c4 	sub	pc,pc,-60

Disassembly of section .text:

80002008 <_get_interrupt_handler>:
80002008:	fe 78 08 00 	mov	r8,-63488
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000200c:	e0 69 00 83 	mov	r9,131
80002010:	f2 0c 01 0c 	sub	r12,r9,r12
80002014:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002018:	f2 ca ff c0 	sub	r10,r9,-64
8000201c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002020:	58 08       	cp.w	r8,0
80002022:	c0 21       	brne	80002026 <_get_interrupt_handler+0x1e>
80002024:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
80002026:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000202a:	48 5a       	lddpc	r10,8000203c <_get_interrupt_handler+0x34>
8000202c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002030:	f0 08 11 1f 	rsub	r8,r8,31
80002034:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002036:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000203a:	5e fc       	retal	r12
8000203c:	80 00       	ld.sh	r0,r0[0x0]
8000203e:	26 00       	sub	r0,96

80002040 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002040:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002044:	fe c0 fc 44 	sub	r0,pc,-956

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002048:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000204c:	d5 53       	csrf	0x15
  cp      r0, r1
8000204e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002050:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
80002052:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002054:	c0 72       	brcc	80002062 <idata_load_loop_end>
  st.d    r0++, r4
80002056:	fe c2 f9 b6 	sub	r2,pc,-1610

8000205a <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
8000205a:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000205c:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
8000205e:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002060:	cf d3       	brcs	8000205a <idata_load_loop>

80002062 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80002062:	30 80       	mov	r0,8
  mov     r2, 0
80002064:	e0 61 01 00 	mov	r1,256
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002068:	02 30       	cp.w	r0,r1
  cp      r0, r1
8000206a:	c0 62       	brcc	80002076 <udata_clear_loop_end>
  brlo    udata_clear_loop
8000206c:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000206e:	30 03       	mov	r3,0

80002070 <udata_clear_loop>:
80002070:	a1 22       	st.d	r0++,r2
80002072:	02 30       	cp.w	r0,r1
80002074:	cf e3       	brcs	80002070 <udata_clear_loop>

80002076 <udata_clear_loop_end>:
80002076:	fe cf ff 4a 	sub	pc,pc,-182
8000207a:	d7 03       	nop

8000207c <mdelay>:
8000207c:	20 1d       	sub	sp,4
8000207e:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80002082:	f8 08 15 01 	lsl	r8,r12,0x1
80002086:	50 08       	stdsp	sp[0x0],r8
80002088:	40 08       	lddsp	r8,sp[0x0]
8000208a:	58 08       	cp.w	r8,0
8000208c:	c0 70       	breq	8000209a <mdelay+0x1e>
8000208e:	40 08       	lddsp	r8,sp[0x0]
void mdelay(int milliseconds) //delay function depending on clock cycles
{
	long volatile cycles = (milliseconds * CYCLES_PER_MS);
	while (cycles != 0)
	{
		cycles--;
80002090:	20 18       	sub	r8,1
80002092:	50 08       	stdsp	sp[0x0],r8
volatile avr32_gpio_port_t * Button_port2 ;

void mdelay(int milliseconds) //delay function depending on clock cycles
{
	long volatile cycles = (milliseconds * CYCLES_PER_MS);
	while (cycles != 0)
80002094:	40 08       	lddsp	r8,sp[0x0]
80002096:	58 08       	cp.w	r8,0
80002098:	cf b1       	brne	8000208e <mdelay+0x12>
	{
		cycles--;
	}
}
8000209a:	2f fd       	sub	sp,-4
8000209c:	5e fc       	retal	r12

8000209e <initLED>:



//initialize LED ports
void initLED ( void )
{
8000209e:	eb cd 40 80 	pushm	r7,lr
	volatile avr32_gpio_port_t * led7_port = & AVR32_GPIO . port [ LED7_PORT ];
	/*
	* Choose GPIO peripheral function ,
	* by writing a 1 to gpers , GPIO Enable Register Set
	*/
	led0_port -> gpers = LED0_BIT_VALUE ; //first LED
800020a2:	fe 78 11 00 	mov	r8,-61184
800020a6:	fc 17 08 00 	movh	r7,0x800
800020aa:	91 17       	st.w	r8[0x4],r7
	led1_port -> gpers = LED1_BIT_VALUE ; //second LED
800020ac:	fc 1e 10 00 	movh	lr,0x1000
800020b0:	91 1e       	st.w	r8[0x4],lr
	led2_port -> gpers = LED2_BIT_VALUE ;
800020b2:	fc 1c 20 00 	movh	r12,0x2000
800020b6:	91 1c       	st.w	r8[0x4],r12
	led3_port -> gpers = LED3_BIT_VALUE ;
800020b8:	fc 1b 40 00 	movh	r11,0x4000
800020bc:	91 1b       	st.w	r8[0x4],r11
	led5_port -> gpers = LED5_BIT_VALUE ;
800020be:	fc 1a 00 10 	movh	r10,0x10
800020c2:	91 1a       	st.w	r8[0x4],r10
	led7_port -> gpers = LED7_BIT_VALUE ;
800020c4:	fc 19 00 40 	movh	r9,0x40
800020c8:	91 19       	st.w	r8[0x4],r9
	/*
	* Set the output value register to 1 in order to
	* turn the LED off (1= off , 0= on in this case ),
	* by writing a 1 to ovrs , Output Value Register Set
	*/
	led0_port -> ovrs = LED0_BIT_VALUE ;
800020ca:	f1 47 00 54 	st.w	r8[84],r7
	led1_port -> ovrs = LED1_BIT_VALUE ;
800020ce:	f1 4e 00 54 	st.w	r8[84],lr
	led2_port -> ovrs = LED2_BIT_VALUE ;
800020d2:	f1 4c 00 54 	st.w	r8[84],r12
	led3_port -> ovrs = LED3_BIT_VALUE ;
800020d6:	f1 4b 00 54 	st.w	r8[84],r11
	led5_port -> ovrs = LED5_BIT_VALUE ;
800020da:	f1 4a 00 54 	st.w	r8[84],r10
	led7_port -> ovrs = LED7_BIT_VALUE ;
800020de:	f1 49 00 54 	st.w	r8[84],r9
	/*
	* Set the output enable register ,
	* by writing a 1 to oders , Output Drive Enable
	* Register Set
	*/
	led0_port -> oders = LED0_BIT_VALUE ;
800020e2:	f1 47 00 44 	st.w	r8[68],r7
	led1_port -> oders = LED1_BIT_VALUE ;
800020e6:	f1 4e 00 44 	st.w	r8[68],lr
	led2_port -> oders = LED2_BIT_VALUE ;
800020ea:	f1 4c 00 44 	st.w	r8[68],r12
	led3_port -> oders = LED3_BIT_VALUE ;
800020ee:	f1 4b 00 44 	st.w	r8[68],r11
	led5_port -> oders = LED5_BIT_VALUE ;
800020f2:	f1 4a 00 44 	st.w	r8[68],r10
	led7_port -> oders = LED7_BIT_VALUE ;
800020f6:	f1 49 00 44 	st.w	r8[68],r9
}
800020fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800020fe:	d7 03       	nop

80002100 <initBUTTON>:
void initBUTTON (void)
{
	Button_port1 = & AVR32_GPIO . port [BUTTON_PORT0];  //Button port 1
80002100:	fe 78 12 00 	mov	r8,-60928
80002104:	48 89       	lddpc	r9,80002124 <initBUTTON+0x24>
80002106:	93 08       	st.w	r9[0x0],r8
	Button_port1->gpers=BUTTON_PIN0;
80002108:	fc 19 01 00 	movh	r9,0x100
8000210c:	91 19       	st.w	r8[0x4],r9
	Button_port1->oderc=BUTTON_PIN0;
8000210e:	f1 49 00 48 	st.w	r8[72],r9
	
	Button_port2 = & AVR32_GPIO . port [BUTTON_PORT1];  //Button port 2
80002112:	48 69       	lddpc	r9,80002128 <initBUTTON+0x28>
80002114:	93 08       	st.w	r9[0x0],r8
	Button_port2->gpers=BUTTON_PIN1;
80002116:	fc 19 00 20 	movh	r9,0x20
8000211a:	91 19       	st.w	r8[0x4],r9
	Button_port2->oderc=BUTTON_PIN1;
8000211c:	f1 49 00 48 	st.w	r8[72],r9
	
}
80002120:	5e fc       	retal	r12
80002122:	00 00       	add	r0,r0
80002124:	00 00       	add	r0,r0
80002126:	00 f4       	st.b	--r0,r4
80002128:	00 00       	add	r0,r0
8000212a:	00 f8       	st.b	--r0,r8

8000212c <main>:


int main ( void )
{
8000212c:	d4 31       	pushm	r0-r7,lr
8000212e:	20 1d       	sub	sp,4
	initLED ();
80002130:	f0 1f 00 32 	mcall	800021f8 <main+0xcc>
	/* Main loop that will toggle a single bit on the GPIO port
	*/
	initBUTTON ();
80002134:	f0 1f 00 32 	mcall	800021fc <main+0xd0>
	prev_state=0;
	
	//Runs forever
	while (1)
	{
		button_state = Button_port1->pvr & BUTTON_PIN0;
80002138:	4b 28       	lddpc	r8,80002200 <main+0xd4>
8000213a:	70 08       	ld.w	r8,r8[0x0]
8000213c:	71 89       	ld.w	r9,r8[0x60]
		
		if (button_state == 0) //if button PB0 is pressed we go here
8000213e:	e6 19 01 00 	andh	r9,0x100,COH
80002142:	cf d1       	brne	8000213c <main+0x10>
		{

			while(1) //Toggles between different LEDs every second
			{ 
				AVR32_GPIO . port [ LED0_PORT ]. ovrt = LED0_BIT_VALUE ;
80002144:	fe 77 10 00 	mov	r7,-61440
80002148:	fc 10 08 00 	movh	r0,0x800
8000214c:	50 00       	stdsp	sp[0x0],r0
				
				mdelay(1000);
8000214e:	e0 66 03 e8 	mov	r6,1000
				AVR32_GPIO . port [ LED0_PORT ]. ovrt = LED0_BIT_VALUE ;
				AVR32_GPIO . port [ LED1_PORT ]. ovrt = LED1_BIT_VALUE ;
80002152:	fc 15 10 00 	movh	r5,0x1000
				
				mdelay(1000);
				AVR32_GPIO . port [ LED2_PORT ]. ovrt = LED2_BIT_VALUE ;
80002156:	fc 14 20 00 	movh	r4,0x2000
				AVR32_GPIO . port [ LED1_PORT ]. ovrt = LED1_BIT_VALUE ;
				
				mdelay(1000);
				AVR32_GPIO . port [ LED3_PORT ]. ovrt = LED3_BIT_VALUE ;
8000215a:	fc 13 40 00 	movh	r3,0x4000
				AVR32_GPIO . port [ LED2_PORT ]. ovrt = LED2_BIT_VALUE ;
				
				mdelay(1000);
				AVR32_GPIO . port [ LED5_PORT ]. ovrt = LED5_BIT_VALUE ;
8000215e:	fc 12 00 10 	movh	r2,0x10
				AVR32_GPIO . port [ LED3_PORT ]. ovrt = LED3_BIT_VALUE ;
				
				mdelay(1000);
				AVR32_GPIO . port [ LED7_PORT ]. ovrt = LED7_BIT_VALUE ;
80002162:	fc 11 00 40 	movh	r1,0x40
		if (button_state == 0) //if button PB0 is pressed we go here
		{

			while(1) //Toggles between different LEDs every second
			{ 
				AVR32_GPIO . port [ LED0_PORT ]. ovrt = LED0_BIT_VALUE ;
80002166:	40 08       	lddsp	r8,sp[0x0]
80002168:	ef 48 01 5c 	st.w	r7[348],r8
				
				mdelay(1000);
8000216c:	0c 9c       	mov	r12,r6
8000216e:	f0 1f 00 26 	mcall	80002204 <main+0xd8>
				AVR32_GPIO . port [ LED0_PORT ]. ovrt = LED0_BIT_VALUE ;
80002172:	ef 40 01 5c 	st.w	r7[348],r0
				AVR32_GPIO . port [ LED1_PORT ]. ovrt = LED1_BIT_VALUE ;
80002176:	ef 45 01 5c 	st.w	r7[348],r5
				
				mdelay(1000);
8000217a:	0c 9c       	mov	r12,r6
8000217c:	f0 1f 00 22 	mcall	80002204 <main+0xd8>
				AVR32_GPIO . port [ LED2_PORT ]. ovrt = LED2_BIT_VALUE ;
80002180:	ef 44 01 5c 	st.w	r7[348],r4
				AVR32_GPIO . port [ LED1_PORT ]. ovrt = LED1_BIT_VALUE ;
80002184:	ef 45 01 5c 	st.w	r7[348],r5
				
				mdelay(1000);
80002188:	0c 9c       	mov	r12,r6
8000218a:	f0 1f 00 1f 	mcall	80002204 <main+0xd8>
				AVR32_GPIO . port [ LED3_PORT ]. ovrt = LED3_BIT_VALUE ;
8000218e:	ef 43 01 5c 	st.w	r7[348],r3
				AVR32_GPIO . port [ LED2_PORT ]. ovrt = LED2_BIT_VALUE ;
80002192:	ef 44 01 5c 	st.w	r7[348],r4
				
				mdelay(1000);
80002196:	0c 9c       	mov	r12,r6
80002198:	f0 1f 00 1b 	mcall	80002204 <main+0xd8>
				AVR32_GPIO . port [ LED5_PORT ]. ovrt = LED5_BIT_VALUE ;
8000219c:	ef 42 01 5c 	st.w	r7[348],r2
				AVR32_GPIO . port [ LED3_PORT ]. ovrt = LED3_BIT_VALUE ;
800021a0:	ef 43 01 5c 	st.w	r7[348],r3
				
				mdelay(1000);
800021a4:	0c 9c       	mov	r12,r6
800021a6:	f0 1f 00 18 	mcall	80002204 <main+0xd8>
				AVR32_GPIO . port [ LED7_PORT ]. ovrt = LED7_BIT_VALUE ;
800021aa:	ef 41 01 5c 	st.w	r7[348],r1
				AVR32_GPIO . port [ LED5_PORT ]. ovrt = LED5_BIT_VALUE ;
800021ae:	ef 42 01 5c 	st.w	r7[348],r2
				
				mdelay(1000);
800021b2:	0c 9c       	mov	r12,r6
800021b4:	f0 1f 00 14 	mcall	80002204 <main+0xd8>
				AVR32_GPIO . port [ LED7_PORT ]. ovrt = LED7_BIT_VALUE ;
800021b8:	ef 41 01 5c 	st.w	r7[348],r1
				AVR32_GPIO . port [ LED5_PORT ]. ovrt = LED5_BIT_VALUE ;
800021bc:	ef 42 01 5c 	st.w	r7[348],r2
				
				mdelay(1000);
800021c0:	0c 9c       	mov	r12,r6
800021c2:	f0 1f 00 11 	mcall	80002204 <main+0xd8>
				AVR32_GPIO . port [ LED5_PORT ]. ovrt = LED5_BIT_VALUE ;
800021c6:	ef 42 01 5c 	st.w	r7[348],r2
				AVR32_GPIO . port [ LED3_PORT ]. ovrt = LED3_BIT_VALUE ;
800021ca:	ef 43 01 5c 	st.w	r7[348],r3
				
				mdelay(1000);
800021ce:	0c 9c       	mov	r12,r6
800021d0:	f0 1f 00 0d 	mcall	80002204 <main+0xd8>
				AVR32_GPIO . port [ LED3_PORT ]. ovrt = LED3_BIT_VALUE ;
800021d4:	ef 43 01 5c 	st.w	r7[348],r3
				AVR32_GPIO . port [ LED2_PORT ]. ovrt = LED2_BIT_VALUE ;
800021d8:	ef 44 01 5c 	st.w	r7[348],r4
				
				mdelay(1000);
800021dc:	0c 9c       	mov	r12,r6
800021de:	f0 1f 00 0a 	mcall	80002204 <main+0xd8>
				AVR32_GPIO . port [ LED2_PORT ]. ovrt = LED2_BIT_VALUE ;
800021e2:	ef 44 01 5c 	st.w	r7[348],r4
				AVR32_GPIO . port [ LED1_PORT ]. ovrt = LED1_BIT_VALUE ;
800021e6:	ef 45 01 5c 	st.w	r7[348],r5
				
				mdelay(1000);		
800021ea:	0c 9c       	mov	r12,r6
800021ec:	f0 1f 00 06 	mcall	80002204 <main+0xd8>
				AVR32_GPIO . port [ LED1_PORT ]. ovrt = LED1_BIT_VALUE ;				
800021f0:	ef 45 01 5c 	st.w	r7[348],r5
800021f4:	cb 9b       	rjmp	80002166 <main+0x3a>
800021f6:	00 00       	add	r0,r0
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	20 9e       	sub	lr,9
800021fc:	80 00       	ld.sh	r0,r0[0x0]
800021fe:	21 00       	sub	r0,16
80002200:	00 00       	add	r0,r0
80002202:	00 f4       	st.b	--r0,r4
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 7c       	sub	r12,7

Disassembly of section .exception:

80002400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002400:	c0 08       	rjmp	80002400 <_evba>
	...

80002404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002404:	c0 08       	rjmp	80002404 <_handle_TLB_Multiple_Hit>
	...

80002408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002408:	c0 08       	rjmp	80002408 <_handle_Bus_Error_Data_Fetch>
	...

8000240c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000240c:	c0 08       	rjmp	8000240c <_handle_Bus_Error_Instruction_Fetch>
	...

80002410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002410:	c0 08       	rjmp	80002410 <_handle_NMI>
	...

80002414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002414:	c0 08       	rjmp	80002414 <_handle_Instruction_Address>
	...

80002418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002418:	c0 08       	rjmp	80002418 <_handle_ITLB_Protection>
	...

8000241c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000241c:	c0 08       	rjmp	8000241c <_handle_Breakpoint>
	...

80002420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002420:	c0 08       	rjmp	80002420 <_handle_Illegal_Opcode>
	...

80002424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002424:	c0 08       	rjmp	80002424 <_handle_Unimplemented_Instruction>
	...

80002428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002428:	c0 08       	rjmp	80002428 <_handle_Privilege_Violation>
	...

8000242c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000242c:	c0 08       	rjmp	8000242c <_handle_Floating_Point>
	...

80002430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002430:	c0 08       	rjmp	80002430 <_handle_Coprocessor_Absent>
	...

80002434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002434:	c0 08       	rjmp	80002434 <_handle_Data_Address_Read>
	...

80002438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002438:	c0 08       	rjmp	80002438 <_handle_Data_Address_Write>
	...

8000243c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000243c:	c0 08       	rjmp	8000243c <_handle_DTLB_Protection_Read>
	...

80002440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002440:	c0 08       	rjmp	80002440 <_handle_DTLB_Protection_Write>
	...

80002444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002444:	c0 08       	rjmp	80002444 <_handle_DTLB_Modified>
	...

80002450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002450:	c0 08       	rjmp	80002450 <_handle_ITLB_Miss>
	...

80002460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002460:	c0 08       	rjmp	80002460 <_handle_DTLB_Miss_Read>
	...

80002470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002470:	c0 08       	rjmp	80002470 <_handle_DTLB_Miss_Write>
	...

80002500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002500:	c0 08       	rjmp	80002500 <_handle_Supervisor_Call>
80002502:	d7 03       	nop

80002504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002504:	30 0c       	mov	r12,0
80002506:	fe b0 fd 81 	rcall	80002008 <_get_interrupt_handler>
8000250a:	58 0c       	cp.w	r12,0
8000250c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002510:	d6 03       	rete

80002512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002512:	30 1c       	mov	r12,1
80002514:	fe b0 fd 7a 	rcall	80002008 <_get_interrupt_handler>
80002518:	58 0c       	cp.w	r12,0
8000251a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000251e:	d6 03       	rete

80002520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002520:	30 2c       	mov	r12,2
80002522:	fe b0 fd 73 	rcall	80002008 <_get_interrupt_handler>
80002526:	58 0c       	cp.w	r12,0
80002528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000252c:	d6 03       	rete

8000252e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000252e:	30 3c       	mov	r12,3
80002530:	fe b0 fd 6c 	rcall	80002008 <_get_interrupt_handler>
80002534:	58 0c       	cp.w	r12,0
80002536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000253a:	d6 03       	rete
8000253c:	d7 03       	nop
8000253e:	d7 03       	nop
80002540:	d7 03       	nop
80002542:	d7 03       	nop
80002544:	d7 03       	nop
80002546:	d7 03       	nop
80002548:	d7 03       	nop
8000254a:	d7 03       	nop
8000254c:	d7 03       	nop
8000254e:	d7 03       	nop
80002550:	d7 03       	nop
80002552:	d7 03       	nop
80002554:	d7 03       	nop
80002556:	d7 03       	nop
80002558:	d7 03       	nop
8000255a:	d7 03       	nop
8000255c:	d7 03       	nop
8000255e:	d7 03       	nop
80002560:	d7 03       	nop
80002562:	d7 03       	nop
80002564:	d7 03       	nop
80002566:	d7 03       	nop
80002568:	d7 03       	nop
8000256a:	d7 03       	nop
8000256c:	d7 03       	nop
8000256e:	d7 03       	nop
80002570:	d7 03       	nop
80002572:	d7 03       	nop
80002574:	d7 03       	nop
80002576:	d7 03       	nop
80002578:	d7 03       	nop
8000257a:	d7 03       	nop
8000257c:	d7 03       	nop
8000257e:	d7 03       	nop
80002580:	d7 03       	nop
80002582:	d7 03       	nop
80002584:	d7 03       	nop
80002586:	d7 03       	nop
80002588:	d7 03       	nop
8000258a:	d7 03       	nop
8000258c:	d7 03       	nop
8000258e:	d7 03       	nop
80002590:	d7 03       	nop
80002592:	d7 03       	nop
80002594:	d7 03       	nop
80002596:	d7 03       	nop
80002598:	d7 03       	nop
8000259a:	d7 03       	nop
8000259c:	d7 03       	nop
8000259e:	d7 03       	nop
800025a0:	d7 03       	nop
800025a2:	d7 03       	nop
800025a4:	d7 03       	nop
800025a6:	d7 03       	nop
800025a8:	d7 03       	nop
800025aa:	d7 03       	nop
800025ac:	d7 03       	nop
800025ae:	d7 03       	nop
800025b0:	d7 03       	nop
800025b2:	d7 03       	nop
800025b4:	d7 03       	nop
800025b6:	d7 03       	nop
800025b8:	d7 03       	nop
800025ba:	d7 03       	nop
800025bc:	d7 03       	nop
800025be:	d7 03       	nop
800025c0:	d7 03       	nop
800025c2:	d7 03       	nop
800025c4:	d7 03       	nop
800025c6:	d7 03       	nop
800025c8:	d7 03       	nop
800025ca:	d7 03       	nop
800025cc:	d7 03       	nop
800025ce:	d7 03       	nop
800025d0:	d7 03       	nop
800025d2:	d7 03       	nop
800025d4:	d7 03       	nop
800025d6:	d7 03       	nop
800025d8:	d7 03       	nop
800025da:	d7 03       	nop
800025dc:	d7 03       	nop
800025de:	d7 03       	nop
800025e0:	d7 03       	nop
800025e2:	d7 03       	nop
800025e4:	d7 03       	nop
800025e6:	d7 03       	nop
800025e8:	d7 03       	nop
800025ea:	d7 03       	nop
800025ec:	d7 03       	nop
800025ee:	d7 03       	nop
800025f0:	d7 03       	nop
800025f2:	d7 03       	nop
800025f4:	d7 03       	nop
800025f6:	d7 03       	nop
800025f8:	d7 03       	nop
800025fa:	d7 03       	nop
800025fc:	d7 03       	nop
800025fe:	d7 03       	nop
