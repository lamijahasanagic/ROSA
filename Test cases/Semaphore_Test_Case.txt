/*****************************************************************************

                 ,//////,   ,////    ,///' /////,
                ///' ./// ///'///  ///,    ,, //
               ///////,  ///,///   '/// ///''\\,
             ,///' '///,'/////',/////'  /////'\\,

    This is a test case for the expanded ROSA functionality. The test
	case considers three periodic tasks A, B and C with priorities
	off 3, 2 and 1 respectively. Tasks A and C share a binary
	semaphore S1, making its ceiling priority equal to 3. According
	to the provided documentation of the test cases task C starts
	executing first and locks the semaphore and does work with it for
	4 seconds. Task A becomes  ready at the 2nd second and tries to lock
	the semaphore but fails. This raises the priority of task C to 3.
	At the 3rd second task B is ready but it can not preempt task C due
	to its new raised priority. Task C then finishes critical execution
	and hands over the semaphore to task A. Finally task B executes when A
	finishes its execution. This behaviour is repeated periodically.
    
*****************************************************************************/
/* Tab size: 4 */

//INCLUDE NECCESSARY FILES HERE

//Data blocks for the tasks
#define TASK_A_STACK_SIZE 0x40
static int task_a_stack[TASK_A_STACK_SIZE];
static tcb task_a_tcb;
unsigned int task_a_priority;

//Data blocks for the tasks
#define TASK_B_STACK_SIZE 0x40
static int task_b_stack[TASK_B_STACK_SIZE];
static tcb task_b_tcb;
unsigned int task_b_priority;

//Data blocks for the tasks
#define TASK_C_STACK_SIZE 0x40
static int task_c_stack[TASK_C_STACK_SIZE];
static tcb task_c_tcb;
unsigned int task_c_priority;

//handle and ceiling priority for the semaphore
SemaphoreHandle * S1 = NULL;
unsigned int S1_priority = 3;

/*************************************************************
 * Task A, highest priority
 * lights up LED0 when executing
 * turns LED0 off when it stops executing
 ************************************************************/
void task_a(void)
{
	//Task A becomes ready at 2nd second.
	rosaTicks ticksToDelay = 2000;
	ROSA_taskDelay(ticksToDelay);

	while(1)
	{

		//Task A attempts to lock S1

		if(ROSA_takeSemaphore(S1, 0)
		{
			//When semaphore gets locked turn on LED0
			ledOn(LED0_GPIO);
			//Do work for 2 seconds
			delay_ms(2000);
			//Turn off LED after done with work
			ledOff(LED0_GPIO);
			//Unlock semaphore S1
			ROSA_giveSemaphore(S1);
		}
		
		//Sleep for 4 seconds and repeat
		ticksToDelay = 4000;
		ROSA_taskDelay(ticksToDelay);
	}

}

/*************************************************************
 * Task B, medium priority
 * lights up LED1 when executing
 * turns LED1 off when it stops executing
 ************************************************************/
void task_b(void)
{

	//Task B becomes ready at 3rd second.
	rosaTicks ticksToDelay = 3000;
	ROSA_taskDelay(ticksToDelay);

	while(1) {

		//Turn on LED and do work for 2 seconds
		ledOn(LED1_GPIO);
		delay_ms(2000);
		//Turn off LED when done with work
		ledOff(LED1_GPIO);
		//As B will be preempted by A, and wont be able to preempt A
		//Due to the syncronization protocol it will need to sleep for 3 seconds
		ROSA_taskDelay(ticksToDelay);
	}
}

/*************************************************************
 * Task C, lowest priority
 * lights up LED2 when executing
 * turns LED2 off when it stops executing
 ************************************************************/
void task_c(void)
{

	//Task C becomes ready immediately.
	rosaTicks ticksToDelay;

	while(1)
	{

		//Task A attempts to lock S1

		if(ROSA_takeSemaphore(S1, 0)
		{
			//When semaphore gets locked turn on LED2
			ledOn(LED2_GPIO);
			//Do work for 4 seconds
			delay_ms(4000);
			//Turn off LED after done with work
			ledOff(LED2_GPIO);
			//Unlock semaphore S1
			ROSA_giveSemaphore(S1);
		}
		
		//Sleep for 4 seconds and repeat
		ticksToDelay = 4000;
		ROSA_taskDelay(ticksToDelay);
	}

}


/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
	//Initialize the ROSA kernel
	ROSA_init();

	//Assign appropriate priorities to the tasks
	task_a_priority = 3;
	task_b_priority = 2;
	task_c_priority = 1;

	//Create the three tasks A, B and C according to specification

	ROSA_TaskCreate(&task_a_tcb, "tska", task_a, task_a_stack, TASK_A_STACK_SIZE, task_a_priority);
	
	ROSA_TaskCreate(&task_b_tcb, "tskb", task_b, task_b_stack, TASK_B_STACK_SIZE, task_b_priority);

	ROSA_TaskCreate(&task_c_tcb, "tskc", task_c, task_c_stack, TASK_C_STACK_SIZE, task_c_priority);

	//Create the semaphore according to specification (ceiling(S1) = priority(A))
	ROSA_createBinarySemaphore(S1, S1_priority);

	//Start the ROSA kernel
	ROSA_start();
	/* Execution will never return here */
	while(1);
}