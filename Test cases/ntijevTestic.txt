//INCLUDE NECCESSARY FILES HERE

//Standard library includes
#include <avr32/io.h>

//Kernel includes
#include "kernel/rosa_ker.h"
#include "kernel/rosa_clk.h"
#include "kernel/rosa_semaphore.h"

//Driver includes
#include "drivers/led.h"
#include "drivers/delay.h"
#include "drivers/usart.h"

//Include configuration
#include "rosa_config.h"

//Data blocks for the tasks
#define TASK_A_STACK_SIZE 0x40
static int task_a_stack[TASK_A_STACK_SIZE];
static tcb task_a_tcb;
unsigned int task_a_priority;

//Data blocks for the tasks
#define TASK_B_STACK_SIZE 0x40
static int task_b_stack[TASK_B_STACK_SIZE];
static tcb task_b_tcb;
unsigned int task_b_priority;

//Data blocks for the tasks
#define TASK_C_STACK_SIZE 0x40
static int task_c_stack[TASK_C_STACK_SIZE];
static tcb task_c_tcb;
unsigned int task_c_priority;

//handle and ceiling priority for the semaphore
SemaphoreHandle S1 = NULL;

unsigned int S1_priority = 3;

SemaphoreHandle S2 = NULL;

unsigned int S2_priority = 2;

SemaphoreHandle S3 = NULL;

unsigned int S3_priority = 3;

void task_b(void);
void task_c(void);

/*************************************************************
 * Task A, highest priority
 * lights up LED0 when executing
 * turns LED0 off when it stops executing
 ************************************************************/
void task_a(void)
{
	//Task A becomes ready at 2nd second.
	const rosaTicks ticksToDelay = 2000;
	//ROSA_taskDelayUntil(ticksToDelay);

	ROSA_taskDelay(ticksToDelay + (rosaTicks) 2000);

	while(1)
	{

			//When semaphore gets locked turn on LED2
			ledOn(LED2_GPIO);
			//Do work for 4 seconds
			ROSA_taskDelay(ticksToDelay + (rosaTicks) 2000);
			//Turn off LED after done with work
			ledOff(LED2_GPIO);
			
			ROSA_taskDelay(ticksToDelay + (rosaTicks) 2000);


	}

}

/*************************************************************
 * Task B, medium priority
 * lights up LED1 when executing
 * turns LED1 off when it stops executing
 ************************************************************/
void task_b(void)
{

	//Task B becomes ready at 3rd second.


	while(1) {

	}
}

/*************************************************************
 * Task C, lowest priority
 * lights up LED2 when executing
 * turns LED2 off when it stops executing
 ************************************************************/
void task_c(void)
{

	//Task C becomes ready immediately.
	while(1)
	{

		
	}

}


/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
	//Initialize the ROSA kernel
	ROSA_init();

	//Assign appropriate priorities to the tasks
	task_a_priority = 1;
	task_b_priority = 2;
	task_c_priority = 3;

	//Create the three tasks A, B and C according to specification

	ROSA_TaskCreate(&task_a_tcb, "tska", task_a, task_a_stack,TASK_A_STACK_SIZE, task_a_priority);
	
	//ROSA_TaskCreate(&task_b_tcb, "tskb", task_b, task_b_stack,TASK_B_STACK_SIZE, task_b_priority);

	//ROSA_TaskCreate(&task_c_tcb, "tskc", task_c, task_c_stack,TASK_C_STACK_SIZE, task_c_priority);

	//Create the semaphore according to specification (ceiling(S1)
	//= priority(A))
	//ROSA_createBinarySemaphore(&S1, S1_priority);

	//Start the ROSA kernel
	ROSA_start();
	/* Execution will never return here */
	while(1);
}